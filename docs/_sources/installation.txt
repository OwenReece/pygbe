Installation
------------

The following instructions assume that the operating system is Ubuntu.
Run the corresponding commands in your flavor of Linux to install.

Dependencies (last tested)
~~~~~~~~~~~~~~~~~~~~~~~~~~

-  Python 2.7.12
-  Numpy 1.11.1
-  SciPy 0.17.1
-  SWIG 3.0.8
-  NVCC 7.5

   -  gcc < 4.10

-  PyCUDA 2016.1.3
-  matplotlib 1.5.1 (optional, for post-processing only)

Python and Numpy
^^^^^^^^^^^^^^^^

To install the specific version of these packages we recommend using
either `conda <http://conda.pydata.org/docs/get-started.html>`_ or
`pip <http://python-packaging-user-guide.readthedocs.org/en/latest/installing/>`_.

To create a new environment for using PyGBe with ``conda`` you can do
the following:

::

    conda create -n pygbe python=2.7 numpy scipy swig matplotlib
    source activate pygbe

and then proceed with the rest of the installation instructions
(although note that if you do this, ``swig`` is already installed.

SWIG
^^^^

To install SWIG we recommend using either ``conda``, your distribution
package manager or `SWIG's
website <http://www.swig.org/download.html>`_.

NVCC
^^^^

`Download and install <https://developer.nvidia.com/cuda-downloads>`_
the CUDA Toolkit.

PyCUDA
^^^^^^

PyCUDA must be installed from source. Follow the
`instructions <http://wiki.tiker.net/PyCuda/Installation>`_ on the
PyCUDA website. We summarize the commands to install PyCUDA on Ubuntu
here:

::

    > cd $HOME
    > mkdir src
    > cd src
    > wget https://github.com/inducer/pycuda/archive/v2016.1.2.tar.gz
    > tar -xvzf pycuda-2016.1.2.tar.gz
    > cd pycuda-2016.1.2
    > python configure.py --cuda-root=/usr/local/cuda
    > make
    > sudo make install

If you are not installing PyCUDA systemwide, do not use ``sudo`` to
install and simply run

::

    > make install

as the final command.

Test the installation by running the following:

::

    > cd test
    > python test_driver.py

PyGBe has been run and tested on Ubuntu 12.04, 13.10, 15.04 and 16.04
(using gcc < 4.10).

Installing PyGBe
~~~~~~~~~~~~~~~~

Create a clone of the repository on your machine:

::

    > cd $HOME/src
    > git clone https://github.com/barbagroup/pygbe.git
    > cd pygbe
    > python setup.py install clean

If you are installing PyGBe systemwide (if you installed PyCUDA
systemwide), then use ``sudo`` on the install command

::

    > sudo python setup.py install clean

Run PyGBe
---------

PyGBe cases are divided up into individual folders. We have included a
few example problems in ``examples``.

Test the PyGBe installation by running the Lysozyme (``lys``) example in
the folder ``examples``. The structure of the folder is as follows:

::

    lys
      ˫ lys.param
      ˫ lys.config
      ˫ built_parse.pqr
      ˫ geometry/Lys1.face
      ˫ geometry/Lys1.vert
      ˫ output/

To run this case, you can use

::

    > pygbe examples/lys

To run any PyGBe case, you can pass ``pygbe`` a relative or an absolute
path to the problem folder.

Note that PyGBe will grab the first ``param`` and ``config`` files that
it finds in the problem folder (they don't have to share a name with the
folder, but it's helpful for organization). If you want to explicitly
pass in a different/specific ``param`` or ``config`` file, you can use
the ``-p`` and ``-c`` flags, respectively.

If you have a centralized ``geometry`` folder, or want to reuse existing
files without copying them, you can also pass the ``-g`` flag to
``pygbe`` to point to the custom location. Note that this path should
point to a folder which contains a folder called ``geometry``, not to
the ``geometry`` folder itself.

For more information on PyGBe's command line interface, run

::

    > pygbe -h

Mesh
~~~~

In the ``examples`` folder, we provide meshes and ``.pqr`` files for a
few example problems. To plug in your own protein data, download the
corresponding ``.pdb`` file from the Protein Data Bank, then get its
``.pqr`` file using any PDB to PQR converter (there are online tools
available for this). Our code interfaces with meshes generated using
`MSMS (Michel Sanner's Molecular Surface
code) <http://mgltools.scripps.edu/packages/MSMS>`_.

Developer Documentation
~~~~~~~~~~~~~~~~~~~~~~~

Developer documentation is available on
http://barbagroup.github.io/pygbe/docs

Performance:
~~~~~~~~~~~~

`PyGBe
Performance <https://github.com/barbagroup/pygbe/blob/master/performance/PyGBe%20Performance.ipynb>`_

Tests
~~~~~

To run the regression tests, go to the folder ``tests/regression_tests``
and run the script ``run_all_regression_tests.py``, it will prompt you
for permission, then automatically download the meshes needed. The
meshes are hosted on
`zenodo <https://zenodo.org/record/55349?ln=en#.V5EWsu35RhE>`_.

